.\" WARNING! THIS FILE WAS GENERATED AUTOMATICALLY BY c2man!
.\" DO NOT EDIT! CHANGES MADE TO THIS FILE WILL BE LOST!
.TH "fribidi_reorder_line" 3 "1 February 2013" "GNU FriBidi 0.19.7" "Programmer's Manual"
.SH "NAME"
fribidi_reorder_line \- reorder a line of logical string to visual
.SH "SYNOPSIS"
.ft B
#include <fribidi.h>
.sp
FriBidiLevel fribidi_reorder_line
.br
(
.br
	FriBidiFlags flags,
.br
	const FriBidiCharType *bidi_types,
.br
	const FriBidiStrIndex len,
.br
	const FriBidiStrIndex off,
.br
	const FriBidiParType base_dir,
.br
	FriBidiLevel *embedding_levels,
.br
	FriBidiChar *visual_str,
.br
	FriBidiStrIndex *map
.br
);
.ft R
.SH "PARAMETERS"
.TP
.B "FriBidiFlags flags"
Reorder flags.
.TP
.B "const FriBidiCharType *bidi_types"
Input list of bidi types as returned by
fribidi_get_bidi_types().
.sp
Possible values for a \fBconst FriBidiCharType\fR are as follows:
.RS 0.75in
.PD 0
.ft B
.nr TL \w'FRIBIDI_TYPE_LTR'u+0.2i
.ft R
.TP \n(TLu
\fBFRIBIDI_TYPE_LTR\fR
Left-To-Right letter.
.TP \n(TLu
\fBFRIBIDI_TYPE_RTL\fR
Right-To-Left letter.
.TP \n(TLu
\fBFRIBIDI_TYPE_AL\fR
Arabic Letter.
.TP \n(TLu
\fBFRIBIDI_TYPE_EN\fR
European Numeral.
.TP \n(TLu
\fBFRIBIDI_TYPE_AN\fR
Arabic Numeral.
.TP \n(TLu
\fBFRIBIDI_TYPE_ES\fR
European number Separator.
.TP \n(TLu
\fBFRIBIDI_TYPE_ET\fR
European number Terminator.
.TP \n(TLu
\fBFRIBIDI_TYPE_CS\fR
Common Separator.
.TP \n(TLu
\fBFRIBIDI_TYPE_NSM\fR
Non Spacing Mark.
.TP \n(TLu
\fBFRIBIDI_TYPE_BN\fR
Boundary Neutral.
.TP \n(TLu
\fBFRIBIDI_TYPE_BS\fR
Block Separator.
.TP \n(TLu
\fBFRIBIDI_TYPE_SS\fR
Segment Separator.
.TP \n(TLu
\fBFRIBIDI_TYPE_WS\fR
WhiteSpace.
.TP \n(TLu
\fBFRIBIDI_TYPE_ON\fR
Other Neutral.
.TP \n(TLu
\fBFRIBIDI_TYPE_LRE\fR
Left-to-Right Embedding.
.TP \n(TLu
\fBFRIBIDI_TYPE_RLE\fR
Right-to-Left Embedding.
.TP \n(TLu
\fBFRIBIDI_TYPE_LRO\fR
Left-to-Right Override.
.TP \n(TLu
\fBFRIBIDI_TYPE_RLO\fR
Right-to-Left Override.
.TP \n(TLu
\fBFRIBIDI_TYPE_PDF\fR
Pop Directional Flag.
.RE
.PD
.TP
.B "const FriBidiStrIndex len"
Input length of the line.
.TP
.B "const FriBidiStrIndex off"
Input offset of the beginning of the line
in the paragraph.
.TP
.B "const FriBidiParType base_dir"
Resolved paragraph base direction.
.sp
Possible values for a \fBconst FriBidiParType\fR are as follows:
.RS 0.75in
.PD 0
.ft B
.nr TL \w'FRIBIDI_PAR_WLTR'u+0.2i
.ft R
.TP \n(TLu
\fBFRIBIDI_PAR_LTR\fR
Left-To-Right paragraph.
.TP \n(TLu
\fBFRIBIDI_PAR_RTL\fR
Right-To-Left paragraph.
.TP \n(TLu
\fBFRIBIDI_PAR_ON\fR
DirectiOn-Neutral paragraph.
.TP \n(TLu
\fBFRIBIDI_PAR_WLTR\fR
Weak Left To Right paragraph.
.TP \n(TLu
\fBFRIBIDI_PAR_WRTL\fR
Weak Right To Left paragraph.
.RE
.PD
.TP
.B "FriBidiLevel *embedding_levels"
Input list of embedding levels,
as returned by
fribidi_get_par_embedding_levels.
.TP
.B "FriBidiChar *visual_str"
Visual string to reorder.
.TP
.B "FriBidiStrIndex *map"
A map of string indices which is reordered
to reflect where each glyph ends up.
.SH "DESCRIPTION"
This function reorders the characters in a line of text from logical to
final visual order.  This function implements part 4 of rule L1, and rules
L2 and L3 of the Unicode Bidirectional Algorithm available at
http://www.unicode.org/reports/tr9/#Reordering_Resolved_Levels.

As a side effect it also sets position maps if not NULL.

You should provide the resolved paragraph direction and embedding levels as
set by fribidi_get_par_embedding_levels().  Also note that the embedding
levels may change a bit.  To be exact, the embedding level of any sequence
of white space at the end of line is reset to the paragraph embedding level
(That is part 4 of rule L1).

Note that the bidi types and embedding levels are not reordered.  You can
reorder these (or any other) arrays using the map later.  The user is
responsible to initialize map to something sensible, like an identity
mapping, or pass NULL if no map is needed.

There is an optional part to this function, which is whether non-spacing
marks for right-to-left parts of the text should be reordered to come after
their base characters in the visual string or not.  Most rendering engines
expect this behavior, but console-based systems for example do not like it.
This is controlled by the FRIBIDI_FLAG_REORDER_NSM flag.  The flag is on
in FRIBIDI_FLAGS_DEFAULT.
.SH "RETURNS"
Maximum level found in this line plus one, or zero if any error
occured (memory allocation failure most probably).
.SH "SEE ALSO"
fribidi_charset_to_unicode(3),
fribidi_unicode_to_charset(3),
fribidi_parse_charset(3),
fribidi_shape_arabic(3),
fribidi_get_par_direction(3),
fribidi_get_par_embedding_levels(3),
fribidi_get_bidi_type(3),
fribidi_get_bidi_types(3),
fribidi_get_bidi_type_name(3),
fribidi_debug_status(3),
fribidi_mirroring_status(3),
fribidi_set_mirroring(3),
fribidi_reorder_nsm_status(3),
fribidi_set_reorder_nsm(3),
fribidi_log2vis_get_embedding_levels(3),
fribidi_get_type(3),
fribidi_get_type_internal(3),
fribidi_remove_bidi_marks(3),
fribidi_log2vis(3),
fribidi_join_arabic(3),
fribidi_get_joining_type(3),
fribidi_get_joining_types(3),
fribidi_get_joining_type_name(3),
fribidi_get_mirror_char(3),
fribidi_shape_mirroring(3),
fribidi_shape(3)
